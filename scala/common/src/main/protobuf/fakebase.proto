syntax = "proto3";

import "actionizers.proto";
import "events.proto";
import "environment.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "scalapb/scalapb.proto";
import "google/protobuf/wrappers.proto";

option (scalapb.options) = {
  scope: FILE
  preserve_unknown_fields: false
  package_name: "co.firstorderlabs.common.protos"
  import: "co.firstorderlabs.common.protos.events.{durationTypeMapper, instantParser}"
};

service AccountService {
    rpc cancelOrder (CancellationRequest) returns (Cancellation) {
    }
    rpc getAccountInfo (SimulationId) returns (AccountInfo) {
    }
    rpc getMatches (SimulationId) returns (MatchEvents) {
    }
    rpc getOrders (SimulationId) returns (Orders) {
    }
    rpc getWallets (SimulationId) returns (Wallets) {
    }
    rpc placeBuyLimitOrder (BuyLimitOrderRequest) returns (BuyLimitOrder) {
    }
    rpc placeBuyMarketOrder (BuyMarketOrderRequest) returns (BuyMarketOrder) {
    }
    rpc placeSellLimitOrder (SellLimitOrderRequest) returns (SellLimitOrder) {
    }
    rpc placeSellMarketOrder (SellMarketOrderRequest) returns (SellMarketOrder) {
    }
}

enum Currency {
    QUATLOO = 0; // Used as a default to handle mis-specifications
    USD = 1;
    BTC = 2;
}

enum DatabaseBackend {
    BigQuery = 0;
    Postgres = 1;
}

enum OrderType {
    limit = 0;
    market = 1;
}

enum SimulationType {
    train = 0;
    evaluation = 1;
}

message AccountInfo {
    Wallets wallets = 1;
    MatchEvents matchEvents = 2;
}

message BuyLimitOrderRequest {
    option (scalapb.message).extends = "co.firstorderlabs.common.types.Events.BuyOrderRequest";
    option (scalapb.message).extends = "co.firstorderlabs.common.types.Events.LimitOrderRequest";

    string price = 1 [(scalapb.field).type = "co.firstorderlabs.common.currency.Configs.ProductPrice"];
    string productId = 2 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.ProductId"];
    string size = 3 [(scalapb.field).type = "co.firstorderlabs.common.currency.Configs.ProductPrice.ProductVolume"];
    bool postOnly = 4;
    google.protobuf.Duration timeToLive = 5 [(scalapb.field).type = "java.time.Duration"];
    SimulationId simulationId = 6 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.SimulationId"];
}

message BuyMarketOrderRequest {
    option (scalapb.message).extends = "co.firstorderlabs.common.types.Events.BuyOrderRequest";
    option (scalapb.message).extends = "co.firstorderlabs.common.types.Events.MarketOrderRequest";

    string funds = 1 [(scalapb.field).type = "co.firstorderlabs.common.currency.Configs.ProductPrice.QuoteVolume"];
    string productId = 2 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.ProductId"];
    SimulationId simulationId = 3 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.SimulationId"];
}

message CancellationRequest {
    string orderId = 1 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.OrderId"];
    SimulationId simulationId = 2;
}

message SellLimitOrderRequest {
    option (scalapb.message).extends = "co.firstorderlabs.common.types.Events.LimitOrderRequest";
    option (scalapb.message).extends = "co.firstorderlabs.common.types.Events.SellOrderRequest";

    string price = 1 [(scalapb.field).type = "co.firstorderlabs.common.currency.Configs.ProductPrice"];
    string productId = 2 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.ProductId"];
    string size = 3 [(scalapb.field).type = "co.firstorderlabs.common.currency.Configs.ProductPrice.ProductVolume"];
    bool postOnly = 4;
    google.protobuf.Duration timeToLive = 5 [(scalapb.field).type = "java.time.Duration"];
    SimulationId simulationId = 6 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.SimulationId"];
}

message SellMarketOrderRequest {
    option (scalapb.message).extends = "co.firstorderlabs.common.types.Events.MarketOrderRequest";
    option (scalapb.message).extends = "co.firstorderlabs.common.types.Events.SellOrderRequest";

    string productId = 1 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.ProductId"];
    string size = 2 [(scalapb.field).type = "co.firstorderlabs.common.currency.Configs.ProductPrice.ProductVolume"];
    SimulationId simulationId = 3 [(scalapb.field).type = "co.firstorderlabs.common.types.Types.SimulationId"];
}

message WalletProto {
    string id = 1;
    Currency currency = 2;
    string balance = 3;
    string holds = 4;
}

message Wallets {
    map<string, WalletProto> wallets = 1; // Map key corresponds to Enum Currency
}

service ExchangeService {
    rpc checkpoint (SimulationId) returns (google.protobuf.Empty) {
    }
    rpc getExchangeInfo (SimulationId) returns (ExchangeInfo) {
    }
    rpc getMatches (SimulationId) returns (MatchEvents) {
    }
    rpc getOrderBooks (OrderBooksRequest) returns (OrderBooks) {
    }
    rpc getSimulationIds (google.protobuf.Empty) returns (SimulationIds) {
    }
    rpc populateStorage (PopulateStorageRequest) returns (google.protobuf.Empty) {
    }
    rpc reset (ObservationRequest) returns (SimulationInfo) {
    }
    rpc run (RunRequest) returns (SimulationInfo) {
    }
    rpc shutdown (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc start (SimulationStartRequest) returns (SimulationInfo) {
    }
    rpc step (StepRequest) returns (SimulationInfo) {
    }
    rpc stop (SimulationId) returns (google.protobuf.Empty) {
    }
    rpc update(UpdateRequest) returns (google.protobuf.Empty) {
    }
}

message ExchangeInfo {
    string intervalStartTime = 1 [(scalapb.field).type = "java.time.Instant"];
    string intervalEndTime = 2 [(scalapb.field).type = "java.time.Instant"];
    AccountInfo accountInfo = 3;
    SimulationId simulationId = 4;
}

message OrderBooksRequest {
    int32 orderBookDepth = 1;
    SimulationId simulationId = 2;
}

message OrderBooks {
    map<string, string> buyOrderBook = 1 [(scalapb.field).key_type = "co.firstorderlabs.common.currency.Configs.ProductPrice", (scalapb.field).value_type = "co.firstorderlabs.common.currency.Configs.ProductPrice.ProductVolume"];
    map<string, string> sellOrderBook = 2 [(scalapb.field).key_type = "co.firstorderlabs.common.currency.Configs.ProductPrice", (scalapb.field).value_type = "co.firstorderlabs.common.currency.Configs.ProductPrice.ProductVolume"];
}

message PopulateStorageParameters {
    string startTime = 1 [(scalapb.field).type = "java.time.Instant"];
    string endTime = 2 [(scalapb.field).type = "java.time.Instant"];
    google.protobuf.Duration timeDelta = 3 [(scalapb.field).type = "java.time.Duration"];
}

message PopulateStorageRequest {
    repeated PopulateStorageParameters populateStorageParameters = 1;
    bool ingestToLocalStorage = 2;
    bool backupToCloudStorage = 3;
    DatabaseBackend databaseBackend = 4;
}

message RunRequest {
    SimulationId simulationId = 1;
    google.protobuf.Int64Value numSteps = 2;
    ObservationRequest observationRequest = 3;
    ActionRequest actionRequest = 4;
}

message SimulationIds {
    repeated SimulationId simulationIds = 1;
}

message SimulationInfo {
    ExchangeInfo exchangeInfo = 1;
    Observation observation = 2;
    SimulationId simulationId = 3;
}

message SimulationStartRequest {
    string startTime = 1 [(scalapb.field).type = "java.time.Instant"];
    string endTime = 2 [(scalapb.field).type = "java.time.Instant"];
    google.protobuf.Duration timeDelta = 3 [(scalapb.field).type = "java.time.Duration"];
    int32 numWarmUpSteps = 4;
    string initialProductFunds = 5 [(scalapb.field).type = "co.firstorderlabs.common.currency.Configs.ProductPrice.ProductVolume"];
    string initialQuoteFunds = 6 [(scalapb.field).type = "co.firstorderlabs.common.currency.Configs.ProductPrice.QuoteVolume"];
    ObservationRequest observationRequest = 8;
    bool enableProgressBar = 9;
    SimulationType simulationType = 10;
    DatabaseBackend databaseBackend = 11;
    bool backupToCloudStorage = 12;
    bool stopInProgressSimulations = 13; // Used by unit tests to make sure only one simulation is in progress at a time
    ActionRequest actionRequest = 14;
    ActionizerConfigs actionizerConfigs = 15;
    bool skipDatabaseQuery = 16;
    bool skipCheckpointAfterWarmup = 17;
}

message StepRequest {
    repeated Order insertOrders = 1;
    repeated Cancellation insertCancellations = 2;
    ObservationRequest observationRequest = 3;
    ActionRequest actionRequest = 4;
    SimulationId simulationId = 5;
}

message UpdateRequest {
    SimulationId simulationId = 1;
    ActionizerConfigs actionizerConfigs = 2;
}